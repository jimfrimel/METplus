[dir]
## Input data directories
## This is the location of your input files for METplus

# Where Your INPUT DATA Is.
PROJ_DIR = /path/to/GSDENS_MET_test

# All Output from METplus
TMP_DIR = {OUTPUT_BASE}/tmp
OUTPUT_BASE = /path/to/pytmp

# your METplus install
METPLUS_BASE = /path/to/METplus

## OBSOLETE: MET_BUILD_BASE = /usr/local/met-6.1
MET_INSTALL_DIR = /lfs1/projects/dtc-hurr/MET/MET_releases/7.1_beta6
PARM_BASE = {METPLUS_BASE}/parm

# EXAMPLE INPUT DIRECTORY and DATA (output from pb2nc)
#  {OUTPUT_BASE}/rap/
# 20181901200.rap.t12z.tm00.20180709.nc
# 20181901300.rap.t13z.tm00.20180709.nc
# 20181901400.rap.t14z.tm00.20180709.nc
# ...
# 20181912100.rap.t21z.tm00.20180710.nc
# 20181912200.rap.t22z.tm00.20180710.nc
# 20181912300.rap.t23z.tm00.20180710.nc
# 20181920000.rap.t00z.tm00.20180711.nc
#
#
# {PROJ_DIR}/2018070912/prepbufr/obs/prepbufr
# 20181900000.rap.t00z.prepbufr.tm00.20180709
# 20181900100.rap.t01z.prepbufr.tm00.20180709
# 20181910600.rap.t06z.prepbufr.tm00.20180710
# 20181921100.rap.t11z.prepbufr.tm00.20180711
#
# PB2NC
#
#
## Used with OUTPUT_BASE to create the output directory from PB2NC

# jtf ????????????????? should wrapper just use PREPBUFR_DATA_DIR 
# INPUT: searches PREPBUFR_DATA_DIR/PREPBUFR_MODEL_DIR_NAME
# THESE 2 DIRS MUST COMBINE TO BE A Directory ABOVE the Parent Directory of the prebbufr data files.
#
PREPBUFR_DATA_DIR = {PROJ_DIR}/2018070912/prepbufr/obs
PREPBUFR_MODEL_DIR_NAME =  
#
PB2NC_OUTPUT_DIR = {OUTPUT_BASE}/{PREPBUFR_MODEL_DIR_NAME}/conus_ne

# These worked
#PREPBUFR_DATA_DIR = {PROJ_DIR}/prepbufr
#PREPBUFR_MODEL_DIR_NAME = rap

#
# POINT_STAT
#
# Forecast and Obs file input directories (netCDF files)
#FCST_INPUT_DIR = /d1/METplus_Mallory/data/gfs
#OBS_INPUT_DIR = /d1/METplus_Mallory/output_for_testing/grid2obs_metplustest.2/prepbufr

# Final output directory for point_stat output
#POINT_STAT_OUTPUT_DIR = {OUTPUT_BASE}/{OBS_NAME}

[config]
## Configuration-related settings such as the process list, begin and end times, etc.
#PROCESS_LIST = PB2NC, PointStat
PROCESS_LIST = EnsembleStat
#PROCESS_LIST = PB2NC

## LOOP_METHOD
## Options are: processes, times
## Looping by time- runs all items in the PROCESS_LIST for each
## initialization time and repeats until all times have been evaluated.
## Looping by processes- run each item in the PROCESS_LIST for all
## specified initialization times then repeat for the next item in the
## PROCESS_LIST.
LOOP_METHOD = processes

# Logging levels: DEBUG, INFO, WARN, ERROR (most verbose is DEBUG)
LOG_LEVEL = DEBUG

## OVERWRITE OPTIONS
## Don't overwrite files if they already exist.
## Set to no if you do NOT want to override existing files
## Set to yes if you do want to override existing files
OVERWRITE_NC_OUTPUT = yes

# Time method by which to perform validation, either by init time or by valid
# time. Indicate by either BY_VALID or BY_INIT
TIME_METHOD = BY_VALID


# THIS IS HOW GSD DIRS WERE ORIGINALLY SETUP .... 
# This is a 36 hour hrrre forecast with 201819012 is this init time.
# 00 is the init 01-36 are the forecast valid times ... ensemble stat is run 37 times.
# Each prepbufr netcdf input file is valid for the ensemble member files valid forecast time ...
#   so 2018070912 + 36 hours is 20180711 00Z ...
#
# Where all the ensemble members are
# ensemble member fcst file list for first set 00:  
#   {PROJ_DIR}/ens_fcst_file_list_00
#     {PROJ_DIR}/2018070912/postprd_mem0001/wrfprs_conus_mem0001_00.grib2
#     ...
#     {PROJ_DIR}/2018070912/postprd_mem0009/wrfprs_conus_mem0009_00.grib2
#   ...
# ensemble member fcst file list for last set to process 36:  
#   {PROJ_DIR}/ens_fcst_file_list_36
#     {PROJ_DIR}/2018070912/postprd_mem0001/wrfprs_conus_mem0001_36.grib2
#     ...
#     {PROJ_DIR}/2018070912/postprd_mem0001/wrfprs_conus_mem0009_36.grib2
#
# command that is run for 00
# ensemble_stat ens_fcst_file_list_00 EnsembleStatConfig_SFC 
#       -point_obs 2018070912/prepbufr/obs/prepbufr/20181901200.rap.t12z.prepbufr.tm00.20180709.nc -outdir . -v 2
# ...
# command that is run for 36
# ensemble_stat ens_fcst_file_list_36 EnsembleStatConfig_SFC 
#       -point_obs 2018070912/prepbufr/obs/prepbufr/20181920000.rap.t00z.prepbufr.tm00.20180711.nc -outdir . -v 2
#



# I PLACED ALL THE ENSEMBLE MEMBERS UNDER A SINGLE INIT DIRECTORY 2018070912
#  {PROJ_DIR}/gsdhrrre/2018070912
#  wrfprs_conus_mem0001_00.grib2
#  ...
#  wrfprs_conus_mem0001_36.grib2
#  wrfprs_conus_mem0002_00.grib2
#  ...
#  wrfprs_conus_mem0002_36.grib2
#  ...
#  wrfprs_conus_mem0009_00.grib2
#  ...
#  wrfprs_conus_mem0009_36.grib2
#
#
# ENSEMBLE VARS
FCST_ENSEMBLE_STAT_INPUT_DIR = {PROJ_DIR}/gsdhrrre
FCST_MIN_FCST = 0  ;; Optional if this variable does not exist it defaults to 0
FCST_MAX_FORECAST = 36



## MET Configuration files for pb2nc and point_stat
#PB2NC_CONFIG_FILE = {PARM_BASE}/met_config/PB2NCConfig_conus_sfc
PB2NC_CONFIG_FILE = {PROJ_DIR}/PB2NCConfig_HRRR
#POINT_STAT_CONFIG_FILE ={PARM_BASE}/met_config/PointStatConfig_conus_sfc

# For processing by init time or valid time, indicate the start and end hours
# in HH format
#START_HOUR = 00
#END_HOUR = 23

# jtf hour time of first file to process
START_HOUR = 12
# jtf hour time of last file to process
END_HOUR = 00

# Indicate the begin and end date, and interval (in hours)
BEG_TIME = 20180709
END_TIME = 20180711
# Used by pb2nc
# jtf ?????????????????????????????? Not sure what this really does ...
# 1 hour prepbufr files ./files ... ????
# Indicates the pb2nc file interval ... 
#INTERVAL_TIME = 24
INTERVAL_TIME = 1

# start and end dates are created by combining the date with
# start and end hours (format can be hh, hhmm, or hhmmss.
START_DATE = {BEG_TIME}{START_HOUR}
END_DATE = {END_TIME}{END_HOUR}

# Either conus_sfc or upper_air
# jtf WHAT IS THIS ?????????? IS THIS REQUIRED .... doesn't appear to be used in the wrapper ..
VERTICAL_LOCATION = conus_sfc

#
# PB2NC
#

# this is the name of model (and subdir to PREPBUFR_DATA_DIR)
# ex: nam for NAM or gdas for GDAS dir
#
# jtf This is used to build the output directory ?????????????? why ?????????????
#PREPBUFR_MODEL_DIR_NAME = prepbufr

# These are appended with PB2NC to differentiate the GRID, POLY, and MESSAGE_TYPE for point_stat.
PB2NC_GRID =
PB2NC_POLY =
PB2NC_STATION_ID =
PB2NC_MESSAGE_TYPE =

# Leave empty to process all
# jtf ?????????? So this is already defined in 
#OBS_BUFR_VAR_LIST = PMO, TOB, TDO, UOB, VOB, PWO, TOCC, D_RH
OBS_BUFR_VAR_LIST = POB, QOB, TOB, ZOB, UOB, VOB, D_DPT, D_WDIR, D_WIND, D_RH, D_MIXR, D_PRMSL




#***********
# ***NOTE***
#***********
# SET TIME_SUMMARY_FLAG to False. There is a bug in met-6.1.
## For defining the time periods for summarization
# False for no time summary, True otherwise
TIME_SUMMARY_FLAG = False
TIME_SUMMARY_BEG = 000000  ;; start time of time summary in HHMMSS format
TIME_SUMMARY_END = 235959  ;; end time of time summary in HHMMSS format
TIME_SUMMARY_VAR_NAMES = PMO,TOB,TDO,UOB,VOB,PWO,TOCC
TIME_SUMMARY_TYPES = min, max, range, mean, stdev, median, p80  ;; a list of the statistics to summarize

# For both pb2nc and point_stat, the obs_window dictionary:
# jtf ?????????????????????
# jtf Action: THIS NEEDS CORRECT was OBS_WINDOW_BEG, change existing confs to use OBS_WINDOW_BEGIN
OBS_WINDOW_BEGIN = -2700
OBS_WINDOW_END = 2700

#
# POINT_STAT
#
# Forecast hour start, end, and interval. Interval is the forecast interval in
# hours.
FCST_HR_START = 0
FCST_HR_END =  120
FCST_HR_INTERVAL = 24



# Model/fcst and obs name, e.g. GFS, NAM, GDAS, etc.
MODEL_NAME = gfs
OBS_NAME = nam

# Regrid to specified grid.  Indicate NONE if no regridding, or the grid id
# (e.g. G212)
REGRID_TO_GRID = G104

# Verification Masking regions
# Indicate which grid and polygon masking region, if applicable
POINT_STAT_GRID = FULL
# List of full path to poly masking files.  NOTE: Only short lists of poly
# files work (those that fit on one line), a long list will result in an
# environment variable that is too long, resulting in an error.  For long
# lists of poly masking files (i.e. all the mask files in the NCEP_mask
# directory), define these in the MET point_stat configuration file.
POINT_STAT_POLY =
POINT_STAT_STATION_ID =

# Message types, if all message types are to be returned, leave this empty,
# otherwise indicate the message types of interest.
POINT_STAT_MESSAGE_TYPE = ONLYSF
# Variables and levels as specified in the field dictionary of the MET
# point_stat configuration file. Specify as FCST_VARn_NAME, FCST_VARn_LEVELS,
# (optional) FCST_VARn_OPTION

FCST_VAR1_NAME = TMP
FCST_VAR1_LEVELS = Z2

FCST_VAR2_NAME = RH
FCST_VAR2_LEVELS = Z2

#FCST_VAR3_NAME = DPT
#FCST_VAR3_LEVELS = Z2

#FCST_VAR4_NAME = UGRD
#FCST_VAR4_LEVELS = Z10

FCST_VAR5_NAME = VGRD
FCST_VAR5_LEVELS = Z10

#FCST_VAR6_NAME = TCDC
#FCST_VAR6_LEVELS = L0
#FCST_VAR6_OPTIONS = GRIB_lvl_typ = 200

#FCST_VAR7_NAME = PRMSL
#FCST_VAR7_LEVELS = Z0

#
##  FILENAME TEMPLATES
#
[filename_templates]
## Output file template
#
# PB2NC
#
# For NAM
# For rap
#   YYYYJJJHHMM
# # 20181900000.rap.t00z.prepbufr.tm00.20180709
#NC_FILE_TMPL = prepbufr.nam.{init?fmt=%Y%m%d}.t{cycle?fmt=%HH}z.tm{offset?fmt=%HH}.nc
# ? jtf Is there a way to  Keep input filename being processed and, just add .nc 
NC_FILE_TMPL = prepbufr.rap.{init?fmt=%Y%m%d}.t{cycle?fmt=%HH}z.tm{offset?fmt=%HH}.{valid?fmt=%j}nc

# wrfprs_conus_mem0002_14.grib2
# {PROJ_DIR}/2018070912/postprd_mem0001/wrfprs_conus_mem0009_00.grib2
# {PROJ_DIR}/2018070912/postprd_mem0009/wrfprs_conus_mem0009_00.grib2
# ...
# {PROJ_DIR}/2018070912/postprd_mem0009/wrfprs_conus_mem0009_36.grib2
FCST_ENSEMBLE_STAT_INPUT_DIR = 
    {PROJ_DIR}/2018070912/postprd_mem0001
FCST_ENSEMBLE_STAT_INPUT_TEMPLATE = 
    {init?fmt=%Y%m%d%H}/postprd_mem0001/wrfprs_conus_mem0001{lead?fmt=%HH}.grib2,
    {init?fmt=%Y%m%d%H}/postprd_mem0002/wrfprs_conus_mem0002{lead?fmt=%HH}.grib2,
    {init?fmt=%Y%m%d%H}/postprd_mem0003/wrfprs_conus_mem0003{lead?fmt=%HH}.grib2

#----
ens_num=9
FCST_ENSEMBLE_STAT_INPUT_TEMPLATE = wrfprs_conus_mem{ens_num}{lead?fmt=%HH}.grib2

FCST_ENSEMBLE_STAT_1_INPUT_TEMPLATE = {init?fmt=%Y%m%d%H}/wrfprs_conus_mem{ens_num}{lead?fmt=%HH}.grib2
FCST_ENSEMBLE_STAT_2_INPUT_TEMPLATE = {init?fmt=%Y%m%d%H}/wrfprs_conus_mem{ens_num}{lead?fmt=%HH}.grib2
FCST_ENSEMBLE_STAT_3_INPUT_TEMPLATE = {init?fmt=%Y%m%d%H}/wrfprs_conus_mem{ens_num}{lead?fmt=%HH}.grib2

#
## REGEX PATTERN
#
[regex_pattern]
#
# PB2NC
#
## Define prepBUFR input directory and filename patterns, place parenthesis
## around any YMD, cycle time, and offset (fhr)
#
# GSDENS_MET_test/2018070912/prepbufr/obs/prepbufr/20181912300.rap.t23z.prepbufr.tm00.20180710
# ? jtf  ??????? What if There are no subdirectories ... 
# I'm  pointing to the parent directory. PREPBUFR_DATA_DIR/PREPBUFR_MODEL_DIR_NAM
# THIS MUST Match the Parent Directory of the prep-bufr files.
# THIS MUST ALSO Contain a Cycle Time Group
# IF IT DOES NOT ... change your directory layout so it does ..:(
#PREPBUFR_DIR_REGEX = .*nam.(2[0-9]{7})
#PREPBUFR_DIR_REGEX = .*(2[0-9]{9}) ;; exception, should exit gracefully
PREPBUFR_DIR_REGEX = .*(2[0-9]{9})\/prepbufr\/obs\/prepbufr ;;pass
#PREPBUFR_DIR_REGEX = .*prepbufr\/obs\/prepbufr ;; exception - should work work, expect ymd group


#PREPBUFR_FILE_REGEX = .*nam.t([0-9]{2})z.prepbufr.tm([0-9]{2})
PREPBUFR_FILE_REGEX = .*rap.t([0-9]{2})z.prepbufr.tm([0-9]{2}).*

#
# POINT_STAT
#
# Regular expressions for files relevant to this use case. Use parentheses
# around any date, cycle and offset time.
#OBS_INPUT_FILE_REGEX = .*prepbufr.nam.(2[0-9]{7}).t([0-9]{2})z.tm([0-9]{2}).nc
#FCST_INPUT_FILE_REGEX = .*pgbf([0-9]{1,3}).gfs.(2[0-9]{9})
